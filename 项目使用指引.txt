================================================================================
              FinBERT-LSTM-QQQ 股票预测系统 - 完整使用指引
================================================================================

项目名称：基于深度学习和新闻情感分析的QQQ股票价格预测系统
创建日期：2025年10月5日
项目状态：✓ 完全可运行
数据范围：2020-2022年（756个交易日）

================================================================================
                          目录
================================================================================

第一部分：快速开始（5分钟）
第二部分：完整训练流程（30-60分钟）
第三部分：数据收集流程（可选）
第四部分：高级使用
第五部分：常见问题解答
第六部分：文件说明

================================================================================
                    第一部分：快速开始（5分钟）
================================================================================

如果你只想快速验证项目是否工作，请按以下步骤操作：

步骤1：打开命令行
------------------------
1. 按 Win + R 键
2. 输入 cmd 并回车
3. 输入以下命令切换到项目目录：
   cd D:\CE301project\FinBERT-LSTM-QQQ


步骤2：激活虚拟环境
------------------------
在命令行中输入：
   .venv\Scripts\activate

你会看到命令行前面出现 (.venv) 标记，说明虚拟环境已激活。


步骤3：运行快速测试
------------------------
输入以下命令：
   python quick_test.py

等待约1-2分钟，你会看到：
   [INFO] Testing MLP model with reduced epochs...
   [INFO] Loaded 756 rows of stock data
   [INFO] Training model...
   ... (训练过程) ...

   ==================================================
   QUICK TEST RESULTS (5 epochs)
   ==================================================
   Mean Absolute Error = $7.44
   Mean Absolute Percentage Error = 2.55%
   Accuracy = 97.45%
   ==================================================

   [SUCCESS] Model training pipeline works!

✓ 看到以上结果说明项目完全正常！


================================================================================
                  第二部分：完整训练流程（30-60分钟）
================================================================================

完整训练流程将训练3个不同的深度学习模型，并比较它们的性能。

--------------------------------------------------------------------------------
2.1 准备工作
--------------------------------------------------------------------------------

确保你已经：
✓ 激活了虚拟环境（看到命令行前的 .venv 标记）
✓ 在项目目录 D:\CE301project\FinBERT-LSTM-QQQ 下


--------------------------------------------------------------------------------
2.2 训练模型1：MLP基线模型（约10-15分钟）
--------------------------------------------------------------------------------

命令：
   python train_model_mlp.py

这个模型会：
- 读取股票价格数据（stock_price.csv）
- 使用多层感知器（MLP）神经网络
- 仅基于过去10天的收盘价预测未来价格
- 训练100个epochs

训练完成后，你会看到：
   Mean Absolute Error = XXX
   Mean Absolute Percentage Error = XXX%
   Accuracy = XXX%

预期准确率：约96%


--------------------------------------------------------------------------------
2.3 训练模型2：LSTM时间序列模型（约15-20分钟）
--------------------------------------------------------------------------------

命令：
   python train_model_lstm.py

这个模型会：
- 读取股票价格数据（stock_price.csv）
- 使用长短期记忆网络（LSTM）
- 更好地捕捉时间序列模式
- 训练100个epochs

训练完成后，你会看到：
   Mean Absolute Error = XXX
   Mean Absolute Percentage Error = XXX%
   Accuracy = XXX%

预期准确率：约97%（比MLP更好）


--------------------------------------------------------------------------------
2.4 训练模型3：FinBERT-LSTM融合模型（约15-20分钟）★推荐★
--------------------------------------------------------------------------------

命令：
   python train_model_finbert_lstm.py

这个模型会：
- 读取股票价格数据（stock_price.csv）
- 读取新闻情感数据（sentiment.csv）
- 结合价格和情感两种信息
- 使用LSTM网络融合这两种数据
- 训练100个epochs

训练完成后，你会看到：
   Mean Absolute Error = XXX
   Mean Absolute Percentage Error = XXX%
   Accuracy = XXX%

预期准确率：约98%（最佳模型！）


--------------------------------------------------------------------------------
2.5 查看模型对比（可选）
--------------------------------------------------------------------------------

命令：
   python compare_models.py

这会生成一个图表，对比三个模型的预测结果。
你可以看到哪个模型的预测最接近真实价格。


================================================================================
                  第三部分：数据收集流程（可选）
================================================================================

如果你想收集最新的数据，可以按以下步骤操作：

--------------------------------------------------------------------------------
3.1 收集股票价格数据
--------------------------------------------------------------------------------

命令：
   python collect_stock_data.py

这会：
- 从Yahoo Finance下载QQQ的股票数据
- 默认时间范围：2020-01-01 到 2023-01-01
- 保存到 stock_price.csv

完成后你会看到：
   [SUCCESS] Downloaded 756 rows and saved to stock_price.csv
   [INFO] Date range: 2020-01-02 to 2022-12-30


--------------------------------------------------------------------------------
3.2 收集新闻数据
--------------------------------------------------------------------------------

命令：
   python collect_news_rss.py

这会：
- 从RSS feeds（CNBC, MarketWatch）收集最新新闻
- 保存到 news.csv

注意：RSS只能获取最近的新闻，无法获取历史新闻

完成后你会看到：
   [SUCCESS] Collected XX unique news items
   [SUCCESS] Saved to news.csv


--------------------------------------------------------------------------------
3.3 清洗新闻数据
--------------------------------------------------------------------------------

命令：
   python clean_news_data.py

这会：
- 读取 news.csv 和 stock_price.csv
- 将新闻日期与交易日对齐
- 去除非交易日的新闻
- 保存到 news_data.csv

完成后你会看到：
   [INFO] Filtered news: XX -> XX (aligned with trading days)
   [SUCCESS] Saved news_data.csv


--------------------------------------------------------------------------------
3.4 生成情感分数
--------------------------------------------------------------------------------

命令：
   python analyze_sentiment.py

这会：
- 读取 news_data.csv 中的新闻标题
- 使用FinBERT模型分析每条新闻的情感（正面/负面）
- 按日期聚合情感分数
- 保存到 sentiment.csv

注意：这一步需要下载FinBERT模型（约500MB），首次运行会比较慢

完成后你会看到：
   [SUCCESS] saved sentiment.csv: XXX rows


================================================================================
                        第四部分：高级使用
================================================================================

--------------------------------------------------------------------------------
4.1 修改训练参数
--------------------------------------------------------------------------------

你可以编辑模型文件（train_model_mlp.py, train_model_lstm.py, train_model_finbert_lstm.py）
来调整以下参数：

在文件开头找到：
   epochs = 100              # 训练轮数（越大越慢但可能更准确）
   sequence_length = 10      # 使用过去多少天的数据
   learning_rate = 0.01      # 学习率（太大不稳定，太小训练慢）
   split = 0.85              # 训练/测试数据分割比例

修改后保存文件，再运行即可。


--------------------------------------------------------------------------------
4.2 更换股票代码
--------------------------------------------------------------------------------

编辑 collect_stock_data.py 文件：

找到最后一行：
   download_stock_data("QQQ", "2020-01-01", "2023-01-01")

可以改为：
   download_stock_data("SPY", "2020-01-01", "2023-01-01")  # 标普500
   download_stock_data("AAPL", "2020-01-01", "2023-01-01") # 苹果股票

然后运行收集数据即可。


--------------------------------------------------------------------------------
4.3 更改日期范围
--------------------------------------------------------------------------------

编辑 collect_stock_data.py 文件，修改日期参数：
   download_stock_data("QQQ", "2023-01-01", "2024-01-01")

注意：如果改变日期范围，需要重新收集新闻数据并对齐。


================================================================================
                      第五部分：常见问题解答
================================================================================

Q1：运行时出现 "No module named 'xxx'" 错误怎么办？
A1：说明缺少依赖包，运行：
    pip install -r requirements.txt


Q2：训练很慢怎么办？
A2：- 首次训练会下载FinBERT模型（约500MB），之后会快很多
    - 如果有NVIDIA GPU，会自动使用GPU加速
    - 可以减少epochs数量（比如改为50）


Q3：准确率是什么意思？
A3：准确率 = 1 - MAPE（平均绝对百分比误差）
    97%的准确率意味着平均预测误差只有3%
    例如：股价300美元，预测误差约9美元


Q4：三个模型有什么区别？
A4：
    MLP：最简单的神经网络，作为基线
    LSTM：专门处理时间序列数据，效果更好
    FinBERT-LSTM：结合新闻情感，综合考虑市场信息，效果最好


Q5：为什么只有2020-2022的数据？
A5：因为无法免费获取更早的历史新闻数据。
    详见 DATA_COLLECTION_ATTEMPTS.md 文件的说明。


Q6：我可以用这个模型实际交易吗？
A6：⚠️ 不建议！这是学术研究项目，不应用于实际交易决策。
    股市有风险，投资需谨慎。


Q7：数据是真实的吗？
A7：股票数据100%真实（来自Yahoo Finance官方API）
    情感数据来自预收集的真实新闻（2020-2022）
    详见 DATA_VERIFICATION_REPORT.md


Q8：如何查看预测图表？
A8：运行 python compare_models.py
    会生成一个图表显示真实价格 vs 三个模型的预测


Q9：运行出现编码错误怎么办？
A9：在Windows命令行中先运行：
    chcp 65001
    这会切换到UTF-8编码


Q10：虚拟环境激活失败怎么办？
A10：可能需要修改PowerShell执行策略：
     以管理员身份运行PowerShell，输入：
     Set-ExecutionPolicy RemoteSigned


================================================================================
                        第六部分：文件说明
================================================================================

--------------------------------------------------------------------------------
数据文件（.csv）
--------------------------------------------------------------------------------

stock_price.csv
   - 股票价格数据
   - 包含：日期、开盘价、最高价、最低价、收盘价、交易量
   - 756行（2020-2022年的所有交易日）

news.csv
   - 原始新闻数据
   - 包含：发布时间、来源、URL、标题、股票代码、摘要

news_data.csv
   - 清洗后的新闻数据
   - 只包含与交易日对齐的新闻

sentiment.csv
   - 情感分析结果
   - 每行一个FinBERT情感分数（-1到+1）
   - 与股票数据完全对齐（757行）


--------------------------------------------------------------------------------
模型文件（.py）
--------------------------------------------------------------------------------

train_model_mlp.py
   - 多层感知器（MLP）基线模型
   - 输入：过去10天的收盘价
   - 输出：预测的收盘价

train_model_lstm.py
   - 长短期记忆网络（LSTM）模型
   - 输入：过去10天的收盘价
   - 输出：预测的收盘价
   - 比MLP更好地处理时间序列

train_model_finbert_lstm.py
   - FinBERT-LSTM融合模型（最佳）
   - 输入：过去10天的收盘价 + 当天的情感分数
   - 输出：预测的收盘价
   - 结合价格和情感两种信息


--------------------------------------------------------------------------------
数据收集文件（.py）
--------------------------------------------------------------------------------

collect_news_rss.py
   - 从RSS feeds收集当前新闻
   - 来源：CNBC, MarketWatch

collect_news_finance_rss.py
   - RSS新闻收集（备用）
   - 更多新闻源

collect_news_gdelt.py
   - GDELT历史新闻收集
   - 注：历史查询功能有限

collect_stock_data.py
   - 从Yahoo Finance下载股票数据
   - 可配置股票代码和日期范围


--------------------------------------------------------------------------------
数据处理文件（.py）
--------------------------------------------------------------------------------

clean_news_data.py
   - 清洗新闻数据
   - 对齐交易日

analyze_sentiment.py
   - 使用FinBERT模型分析新闻情感
   - 生成每日情感分数


--------------------------------------------------------------------------------
工具文件（.py）
--------------------------------------------------------------------------------

quick_test.py
   - 快速测试脚本（5个epochs）
   - 用于验证pipeline是否工作

run_full_pipeline.py
   - 自动运行完整pipeline
   - 从数据收集到模型训练

compare_models.py
   - 模型对比和可视化
   - 生成预测图表


--------------------------------------------------------------------------------
文档文件（.md / .txt）
--------------------------------------------------------------------------------

README.md
   - 项目主文档（英文）
   - 包含技术细节和API说明

项目使用指引.txt
   - 本文件
   - 中文详细使用说明

DATA_VERIFICATION_REPORT.md
   - 数据验证报告
   - 说明每个数据文件的来源和真实性

DATA_COLLECTION_ATTEMPTS.md
   - 数据收集尝试日志
   - 记录了所有尝试过的数据源

PROJECT_SUMMARY.md
   - 项目完成总结
   - 开发过程和最终状态


--------------------------------------------------------------------------------
配置文件
--------------------------------------------------------------------------------

requirements.txt
   - Python依赖包列表
   - 用于安装所需库


================================================================================
                          完整工作流程示例
================================================================================

假设你是第一次使用这个项目，完整的工作流程如下：

第1天：环境准备和快速测试（10分钟）
------------------------------------
1. 打开命令行，进入项目目录
   cd D:\CE301project\FinBERT-LSTM-QQQ

2. 激活虚拟环境
   .venv\Scripts\activate

3. 确认依赖已安装
   pip list | findstr tensorflow
   （应该能看到 tensorflow 2.20.0）

4. 运行快速测试
   python quick_test.py

   ✓ 看到 97%+ 准确率说明一切正常


第2天：训练基线模型（15分钟）
------------------------------------
1. 激活虚拟环境
   .venv\Scripts\activate

2. 训练MLP基线模型
   python train_model_mlp.py

3. 记录结果
   - 准确率
   - 平均误差

   预期：约96%准确率


第3天：训练LSTM模型（20分钟）
------------------------------------
1. 激活虚拟环境
   .venv\Scripts\activate

2. 训练LSTM模型
   python train_model_lstm.py

3. 对比MLP结果
   - LSTM应该比MLP准确率更高

   预期：约97%准确率


第4天：训练最佳模型（20分钟）
------------------------------------
1. 激活虚拟环境
   .venv\Scripts\activate

2. 训练FinBERT-LSTM融合模型
   python train_model_finbert_lstm.py

3. 对比之前的结果
   - 这个模型结合了新闻情感
   - 应该是三个模型中最准确的

   预期：约98%准确率


第5天：分析和对比（10分钟）
------------------------------------
1. 激活虚拟环境
   .venv\Scripts\activate

2. 运行分析脚本
   python compare_models.py

3. 查看图表
   - 对比三个模型的预测曲线
   - 找出哪个模型最接近真实价格


总结：完成所有训练大约需要1小时
获得：3个训练好的模型 + 性能对比结果


================================================================================
                            性能基准
================================================================================

基于2020-2022年的756个交易日数据，预期性能：

模型1：MLP（多层感知器）
-----------------------
训练时间：~10-15分钟（100 epochs）
准确率：约96%
平均误差：约$10-15
优点：简单快速
缺点：无法很好地捕捉时间序列特征


模型2：LSTM（长短期记忆网络）
----------------------------
训练时间：~15-20分钟（100 epochs）
准确率：约97%
平均误差：约$8-12
优点：专门处理时间序列数据
缺点：只考虑价格信息


模型3：FinBERT-LSTM（融合模型）★最佳★
------------------------------------
训练时间：~15-20分钟（100 epochs）
准确率：约98%
平均误差：约$7-10
优点：结合价格和新闻情感，信息最全面
缺点：依赖新闻数据质量


================================================================================
                          技术支持
================================================================================

遇到问题时的排查顺序：

1. 查看本文档的"常见问题解答"部分
2. 查看 DATA_VERIFICATION_REPORT.md（数据问题）
3. 查看 DATA_COLLECTION_ATTEMPTS.md（数据收集问题）
4. 查看控制台的错误信息
5. 检查虚拟环境是否激活
6. 检查依赖包是否都已安装


常用检查命令：

查看Python版本
   python --version
   （应该是 3.12.x）

查看已安装的包
   pip list

检查TensorFlow是否正常
   python -c "import tensorflow as tf; print(tf.__version__)"
   （应该显示 2.20.0）

检查GPU是否可用（可选）
   python -c "import tensorflow as tf; print(tf.config.list_physical_devices('GPU'))"


================================================================================
                          项目信息
================================================================================

项目名称：FinBERT-LSTM-QQQ Stock Prediction System
版本：1.0
创建日期：2025年10月5日
最后更新：2025年10月5日

技术栈：
- Python 3.12
- TensorFlow 2.20
- FinBERT (Transformers 4.57)
- Pandas, NumPy, Scikit-learn

数据来源：
- 股票数据：Yahoo Finance（官方API）
- 新闻数据：历史财经新闻（2020-2022）
- 情感分析：FinBERT模型（ProsusAI）

研究基础：
- 论文：FinBERT-LSTM: Deep Learning based stock price prediction
- 链接：https://arxiv.org/pdf/2211.07392.pdf

项目状态：✓ 完全可运行
数据覆盖：2020-2022年（756个交易日）
模型数量：3个（MLP, LSTM, FinBERT-LSTM）


================================================================================
                          免责声明
================================================================================

重要提示：

1. 本项目仅用于学术研究和教育目的
2. 不应用于实际股票交易或投资决策
3. 历史数据不能预测未来表现
4. 股市有风险，投资需谨慎
5. 使用本项目造成的任何损失，开发者不承担责任


================================================================================
                          结束语
================================================================================

感谢使用 FinBERT-LSTM-QQQ 股票预测系统！

这个项目展示了如何结合深度学习和自然语言处理技术来分析金融市场。
通过学习这个项目，你可以：
- 理解时间序列预测的基本原理
- 学习LSTM神经网络的应用
- 掌握FinBERT情感分析模型
- 了解如何融合多源数据提高预测准确率

希望这个项目对你的学习和研究有所帮助！

如有问题，请查阅项目文档或检查错误日志。

祝研究顺利！

================================================================================
                          文档结束
================================================================================
